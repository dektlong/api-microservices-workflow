apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: k8s-rabbitmq-binder-template
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    
    !@ Binding to an on-cluster RabbitMQ using Tanzu Services Toolkit
    !@
    !@ Assumptions:
    !@ 1. RabbitMQ Operator installed
    !@ 2. RabbitMQ service instance provisioned
    !@
    
    #@ def delivery():
    apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      template: #@ data.values.config
    #@ end

    #@ def claims():
    #@ for s in data.values.workload.spec.serviceClaims:
    ---
    apiVersion: services.tanzu.vmware.com/v1alpha1
    kind: ResourceClaim
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      ref: #@ s.ref
    ---
    apiVersion: servicebinding.io/v1alpha3
    kind: ServiceBinding
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      name: #@ s.name
      service:
        apiVersion: services.tanzu.vmware.com/v1alpha1
        kind: ResourceClaim
        name: #@ data.values.workload.metadata.name + '-' + data.values.workload.metadata.dbName
      workload:
        apiVersion: serving.knative.dev/v1
        kind: Service
        name: #@ data.values.workload.metadata.name
    #@ end
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
    data:
      delivery.yml: #@ yaml.encode(delivery())
      #@ if hasattr(data.values.workload.spec, "serviceClaims") and len(data.values.workload.spec.serviceClaims):
      serviceclaims.yml: #@ yaml.encode(claims())
      #@ end
---

#
# Tempalte for binding to an on-cluster PostgresSQL instance
#
# Assumptions:
# 1. PostgresSQL Operator installed
# 2. PostgresSQL service instance provisioned
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: k8s-postgres-binder-template
spec:
  ytt: |
    #@ "Implementation TBC"
---

#
# Tempalte for binding to RDS PostgresSQL instance using Crossplane
#
# Assumptions:
# 1. Crossplane installed
# 2. ProviderConfig CRD configured to RDS
# 3. PostgreSQLInstance instance provisioned
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: rds-postgres-binder-template
spec:
  ytt: |
    apiVersion: apiextensions.crossplane.io/v1
    kind: Composition
    metadata:
      name: rdsPostgres-crossplane-connector
    labels:
      provider: aws
    spec:
      writeConnectionSecretsToNamespace: crossplane-system
    compositeTypeRef:
      apiVersion: database.example.org/v1alpha1
      kind: XPostgreSQLInstance
      resources:
        - name: #@ data.values.workload.metadata.name + '-' + data.values.workload.metadata.dbName
      base:
        apiVersion: database.aws.crossplane.io/v1beta1
        kind: RDSInstance
        spec:
          forProvider:
            region: us-east-1
            dbInstanceClass: db.t2.small
            masterUsername: masteruser
            engine: postgres
            engineVersion: "12"
            skipFinalSnapshotBeforeDeletion: true
            publiclyAccessible: true
          writeConnectionSecretToRef:
            namespace: crossplane-system
        patches:
          - fromFieldPath: "metadata.uid"
            toFieldPath: "spec.writeConnectionSecretToRef.name"
            transforms:
              - type: string
                string:
                  fmt: "%s-postgresql"
          - fromFieldPath: "spec.parameters.storageGB"
            toFieldPath: "spec.forProvider.allocatedStorage"
        connectionDetails:
          - fromConnectionSecretKey: username
          - fromConnectionSecretKey: password
          - fromConnectionSecretKey: endpoint
          - fromConnectionSecretKey: port

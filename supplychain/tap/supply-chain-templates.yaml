#
#
# `source` instantiates a GitRepository object, responsible for keeping track
# of commits made to a git repository, making them available as blobs to
# further components in the supply chain.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      gitImplementation: libgit2
      ignore: ""


---
#
#
# `image` instantiates a `kpack/Image` object, responsible for ensuring that
# there's a container image built and pushed to a container image registry
# whenever there's either new source code, or its image builder gets na update.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image
spec:
  imagePath: .status.latestImage

  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: $(workload.metadata.name)$
    spec:
      tag: #@ data.values.image_prefix + "$(workload.metadata.name)$"
      serviceAccount: service-account
      builder:
        kind: ClusterBuilder
        name: go-builder
      source:
        blob:
          url: $(sources[0].url)$
          
---
#
#
# `workload-deploy` instantiates using kapp to deploy a single workload as k8s app and service making use of an image input 
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: workload-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$
    spec:
      serviceAccountName: default
      fetch:
        - inline:
            paths:
              manifest.yml: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: $(workload.metadata.name)$
                spec:
                  selector:
                    matchLabels:
                      app: $(workload.metadata.name)$
                  template:
                    metadata:
                      labels:
                        app: $(workload.metadata.name)$
                    spec:
                      imagePullSecrets: 
                      - name: imagereg-secret
                      containers:
                      - name: dekt4pets-frontend
                        image: $(images[0].image)$
                        ports:
                        - containerPort: 8080
               ---
               apiVersion: v1
               kind: Service
               metadata:
               name: $(workload.metadata.name)$-service
               spec:
                ports:
                  - port: 80
                    targetPort: 8080
                selector:
                  app: $(workload.metadata.name)$
                
      template:
        - ytt: {}
      deploy:
        - kapp: {}

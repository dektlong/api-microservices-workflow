#@ load("@ytt:data", "data")
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source-code
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$-source
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      ignore: |
        !.git
---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: scanned-source
spec:
  urlPath: .status.artifact.blob.url
  revisionPath: .status.artifact.blob.url

  template:
    apiVersion: scanning.apps.tanzu.vmware.com/v1alpha1
    kind: SourceScan
    metadata:
      name: $(workload.metadata.name)$-source-scan
    spec:
      blob:
        url: $(sources.source-code.url)$
        revision: $(sources.source-code.revision)$
      scanTemplate: blob-source-scan-template
      scanPolicy: scan-policy
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: built-image
spec:
  imagePath: .status.latestImage

  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: $(workload.metadata.name)$-image
    spec:
      tag: ${REGISTRY_SERVER}/${REGISTRY_PROJECT}/$(workload.metadata.name)$
      serviceAccount: default
      builder:
        kind: ClusterBuilder
        name: default
      source:
        blob:
          url: $(sources.scanned-source.url)$
      build:
        env:
        - name: BP_OCI_SOURCE
          value: $(sources.scanned-source.revision)$
#@ if data.values.scanScope == "srcImg":
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: scanned-image
spec:
  imagePath: .status.artifact.registry.image

  template:
    apiVersion: scanning.apps.tanzu.vmware.com/v1alpha1
    kind: ImageScan
    metadata:
      name: $(workload.metadata.name)$-image-scan
    spec:
      registry:
        image: $(images.built-image.image)$
      scanTemplate: private-image-scan-template
      scanPolicy: scan-policy
#@ end

#@ if data.values.addTesting:
---
apiVersion: carto.run/v1alpha1
kind: RunTemplate
metadata:
  name: run-pre-prod-testing
spec:
  completion:
    succeeded: {key: 'status.conditions.#(type=="Succeeded").status', value: "True"}
    failed:    {key: 'status.conditions.#(type=="Succeeded").status', value: "False"}

  template:
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: $(pipeline.metadata.name)$-
    spec:
      pipelineRef:
        name: $(selected.source)$
        params: $(pipeline.spec.inputs.params.source)$
  #@ if len(data.values.apiTestingScope) > 0:
        names: $(selected.api-testing-scope)$
        params:
        #@ data.values.apiTestingScope
  #@ end
#@ end

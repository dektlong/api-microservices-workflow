#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: #@ data.values.artifactId
spec:
  selector:
    app.tanzu.vmware.com/workload-type: #@ data.values.workloadType
    #@ if data.values.addTesting:
    apps.tanzu.vmware.com/has-tests: 'true'
    #@ end

  resources:
  - name: SOURCE-PROVIDER
    params:
    - name: serviceAccount
      value: default
    - name: gitImplementation
      value: go-git
    templateRef:
      kind: ClusterSourceTemplate
      name: source-template
  #@ if data.values.addTesting:
  - name: SOURCE-TESTER
    sources:
    - name: source
      resource: source-provider
    templateRef:
      kind: ClusterSourceTemplate
      name: testing-pipeline
  #@ end
  #@ if data.values.addScanning:
  - name: SOURCE-SCANNER
    sources:
    - name: source
      resource: source-tester
    templateRef:
      kind: ClusterSourceTemplate
      name: source-scanner-template
  #@
  - name: IMAGE-BUILDER
    params:
    - name: serviceAccount
      value: default
    - name: clusterBuilder
      value: default
    sources:
    - name: source
      resource: source-scanner
    templateRef:
      kind: ClusterImageTemplate
      name: kpack-template
  #@ if data.values.addScanning:
  - name: IMAGE-SCANNER
    images:
    - name: image
      resource: image-builder
    templateRef:
      kind: ClusterImageTemplate
      name: image-scanner-template
  #@ end
  - name: CONFIG-PROVIDER
    images:
    - name: image
      resource: image-scanner
    name: config-provider
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterConfigTemplate
      name: convention-template
  
  #@ if "rdsPostgres" in data.values.serviceBinding:
    - name: BIND-RDS-POSTGRES
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: rds-postgres-binder-template
#@ end    

#@ if "azureSQL" in data.values.serviceBinding:
    - name: BIND-AZURE-SQL
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: azure-sql-binder-template
#@ end

#@ if "gcpSQL" in data.values.serviceBinding:
    - name: BIND-GCP-SQL
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: gcp-sql-binder-template
#@ end

#@ if "k8sRabbitMQ" in data.values.serviceBinding:
    - name: BIND-CLUSTER-RABBITMQ
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: cluster-rabbitmq-binder-template
#@ end

#@ if "k8sPostgresSQL" in data.values.serviceBinding:
    - name: BIND-CLUSTER-POSTGRESQL
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: cluster-postgres-binder-template
#@ end   

#@ if "vmPostgresSQL" in data.values.serviceBinding:
    - name: BIND-VM-POSTGRESQL
      configs:
      - name: config
        resource: config-provider
      name: app-config
      templateRef:
        kind: ClusterConfigTemplate
        name: vm-postgres-binder-template
  #@ end
  - name: CONFIG-WRITER
    configs:
    - name: config
      resource: app-config
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterTemplate
      name: config-writer-template

  params:
  - default: main
    name: gitops_branch
  - default: supplychain
    name: gitops_user_name
  - default: supplychain
    name: gitops_user_email
  - default: supplychain@cluster.local
    name: gitops_commit_message
  - default: ''
    name: gitops_ssh_secret
